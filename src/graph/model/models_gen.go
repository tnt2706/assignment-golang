// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type CreateUserInput struct {
	FirstName string  `json:"firstName"`
	LastName  string  `json:"lastName"`
	Role      *string `json:"role"`
	Status    *string `json:"status"`
	Hash      *string `json:"hash"`
	Salt      *string `json:"salt"`
}

type Response struct {
	IsSuccess bool    `json:"isSuccess"`
	Message   *string `json:"message"`
}

type UpdateUserInput struct {
	FirstName *string `json:"firstName"`
	LastName  *string `json:"lastName"`
	Status    *string `json:"status"`
}

type User struct {
	ID        string    `json:"id"`
	FirstName string    `json:"firstName"`
	LastName  string    `json:"lastName"`
	Email     *string   `json:"email"`
	Hash      *string   `json:"hash"`
	Salt      *string   `json:"salt"`
	Roles     []*string `json:"roles"`
	Status    *string   `json:"status"`
}

type UserResponse struct {
	IsSuccess bool    `json:"isSuccess"`
	Message   *string `json:"message"`
	User      *User   `json:"user"`
}

type Role string

const (
	RoleClinicTechnician Role = "CLINIC_TECHNICIAN"
	RoleClinicPhysician  Role = "CLINIC_PHYSICIAN"
	RolePatient          Role = "PATIENT"
)

var AllRole = []Role{
	RoleClinicTechnician,
	RoleClinicPhysician,
	RolePatient,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleClinicTechnician, RoleClinicPhysician, RolePatient:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
