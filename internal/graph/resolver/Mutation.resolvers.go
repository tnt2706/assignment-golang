package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	graph "assignment/internal/graph/generate"
	"assignment/internal/model"
	"context"
	"errors"
	"fmt"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserInput) (*model.UserResponse, error) {
	foundUserByEmail, err := r.UserRepo.FindUserByEmail(*input.Email)
	if err != nil {
		return nil, err
	}

	if foundUserByEmail != nil {
		return nil, errors.New("email exists")
	}

	user := &model.User{
		Name:        input.Name,
		Email:       input.Email,
		Phone:       input.Phone,
		Sex:         input.Sex,
		Avatar:      input.Avatar,
		DateOfBirth: input.DateOfBirth,
		Roles:       input.Roles,
		Status:      input.Status,
		Password:    *input.Password,
	}

	newUser, _ := r.UserRepo.CreateUser(user)
	return &model.UserResponse{
		IsSuccess: true,
		User:      newUser,
	}, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UserInput) (*model.UserResponse, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*model.Response, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.CreateTodoInput) (*model.Todo, error) {
	todo := &model.Todo{
		Text: input.Text,
		User: input.UserID,
	}

	newTodo, _ := r.TodoRepo.CreateToDo(todo)
	return newTodo, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
