// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type CreateTodoInput struct {
	Text   string `json:"text"`
	UserID string `json:"userId"`
}

type Response struct {
	IsSuccess *bool   `json:"isSuccess,omitempty"`
	Message   *string `json:"message,omitempty"`
}

type UserFilterInput struct {
	Name  *string `json:"name,omitempty"`
	Email *string `json:"email,omitempty"`
}

type UserInput struct {
	Name        *string   `json:"name,omitempty"`
	Email       *string   `json:"email,omitempty"`
	Phone       *string   `json:"phone,omitempty"`
	Sex         *string   `json:"sex,omitempty"`
	Avatar      *string   `json:"avatar,omitempty"`
	DateOfBirth *string   `json:"date_of_birth,omitempty"`
	Roles       []*string `json:"roles,omitempty"`
	Status      *string   `json:"status,omitempty"`
	Password    *string   `json:"password,omitempty"`
}

type UserResponse struct {
	IsSuccess bool    `json:"isSuccess"`
	Message   *string `json:"message,omitempty"`
	User      *User   `json:"user,omitempty"`
}

type Role string

const (
	RoleAdmin Role = "ADMIN"
	RoleUser  Role = "USER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserStatus string

const (
	UserStatusActive  UserStatus = "ACTIVE"
	UserStatusPending UserStatus = "PENDING"
)

var AllUserStatus = []UserStatus{
	UserStatusActive,
	UserStatusPending,
}

func (e UserStatus) IsValid() bool {
	switch e {
	case UserStatusActive, UserStatusPending:
		return true
	}
	return false
}

func (e UserStatus) String() string {
	return string(e)
}

func (e *UserStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserStatus", str)
	}
	return nil
}

func (e UserStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
